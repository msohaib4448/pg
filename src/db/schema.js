import { text, pgSchema, pgTable, uuid, varchar, timestamp, real, bigint, boolean, date, doublePrecision } from 'drizzle-orm/pg-core';
const googleAdsSchema = pgSchema('google_ads');


export const campaigns = pgTable('campaigns', {
    id: uuid('id').primaryKey().defaultRandom(), 
    created_at: timestamp('created_at', { mode: 'string' }).defaultNow().notNull(),
    type: text('type'),
    status: varchar('status', { length: 255 }),
    budget: real('budget'),
    proposal_link: varchar('proposal_link', { length: 255 }),
    dashboard_link: varchar('dashboard_link', { length: 255 }),
    assignee: varchar('assignee', { length: 255 }),
    date_of_creation_notion: timestamp('date_of_creation_notion', { mode: 'string' }),
    last_edit_time: timestamp('last_edit_time', { mode: 'string' }),
    name: varchar('name', { length: 255 }),
    // Foreign Key Reference to Customers Table
    customer_id: uuid('customer_id').references(() => customers.id, { onDelete: 'cascade' }),
    airtable_customer_id: varchar('airtable_customer_id', { length: 255 }),
    airtable_id: varchar('airtable_id', { length: 255 }),
    poc: varchar('poc', { length: 255 }),
    created_time: timestamp('created_time', { mode: 'string' }),
    closed_fiscal_quarter: varchar('closed_fiscal_quarter(calc)', { length: 255 }),
    month: varchar('month', { length: 255 }),
    campaign_added: date('campaign_added'),
    bounty_board: varchar('bounty_board', { length: 255 }),
    in_progress: timestamp('in_progress', { mode: 'string' }),
    complete: timestamp('complete', { mode: 'string' }),
    invoice_link: varchar('invoice_link', { length: 255 }),
    invoiced: timestamp('invoiced', { mode: 'string' }),
    paid: timestamp('paid', { mode: 'string' }),
    last_modified_status: timestamp('last_modified_status', { mode: 'string' }),
    name_from_team: varchar('name_from_team', { length: 255 }),
    time_in_progress_complete: real('time_in_progress_complete').default(0),
    time_complete_invoice: real('time_complete_invoice').default(0),
    time_invoiced_paid: real('time_invoiced_paid').default(0),
    influencer_campaigns: text('influencer_campaigns'),
    influencer_campaigns_2: text('influencer_campaigns_2'),
    total_cost_influencer_campaign: real('total_cost_influencer_campaign').default(0),
    daily_updates: varchar('daily_updates', { length: 255 }),
    client: varchar('client', { length: 255 }),
    image: text('image'),
    tags: varchar('tags', { length: 255 }),
});

export const campaign_history = googleAdsSchema.table('campaign_history', {
    id: bigint('id', { mode: 'bigint' }).primaryKey(),
    updated_at: timestamp('updated_at', { withTimezone: true }).defaultNow(),
    customer_id: bigint('customer_id', { mode: 'bigint' }),
    base_campaign_id: bigint('base_campaign_id', { mode: 'bigint' }),
    ad_serving_optimization_status: varchar('ad_serving_optimization_status'),
    advertising_channel_subtype: varchar('advertising_channel_subtype'),
    advertising_channel_type: varchar('advertising_channel_type'),
    experiment_type: varchar('experiment_type'),
    end_date: varchar('end_date'),
    final_url_suffix: varchar('final_url_suffix'),
    frequency_caps: varchar('frequency_caps'),
    name: varchar('name'),
    optimization_score: doublePrecision('optimization_score'),
    payment_mode: varchar('payment_mode'),
    serving_status: varchar('serving_status'),
    start_date: varchar('start_date'),
    status: varchar('status'),
    tracking_url_template: varchar('tracking_url_template'),
    vanity_pharma_display_url_mode: varchar('vanity_pharma_display_url_mode'),
    vanity_pharma_text: varchar('vanity_pharma_text'),
    video_brand_safety_suitability: varchar('video_brand_safety_suitability'),
    _fivetran_synced: timestamp('_fivetran_synced', { withTimezone: true }),
    _fivetran_start: timestamp('_fivetran_start', { withTimezone: true }),
    _fivetran_end: timestamp('_fivetran_end', { withTimezone: true }),
    _fivetran_active: boolean('_fivetran_active'),
  });